This is a doctest for an addition function
``add_integer(a, b=98)``.

Usage
=====
``add_integer(...)`` returns the sum of two arguments.

::

	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(1, 3)
	4

::
	>>> add_integer(1, -3)
	-2

the function works with floats.

::

	>>> add_integer(1.0, 3.0)
	4

floats are to be casted to int before addition is done.

::

	>>> add_integer(1.2, 3.1)
	4

floats and integers can also be combined

::

	>>> add_integer(1.2, 3)
	4

the second argument is set to 98 by default

::

	>>> add_integer(3)
	101

 Raise TypeError if argument is neither int or float.

::

	>>> add_integer(1, "school")
	Traceback (most recent call last):
	TypeError: b must be an integer

::

	>>> add_integer("hello", 3)
	Traceback (most recent call last):
	TypeError: a must be an integer

::

	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: a must be an integer

::

	>>> add_integer("hello", "school")
	Traceback (most recent call last):
	TypeError: a must be an integer

the function will fail if argument is infinity

::

	>>> add_integer(1, float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

::

	>>> add_integer(3, float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer
